{"version":3,"sources":["components/NumberInput.js","containers/GasCalculator.js","containers/Theme.js","App.js","serviceWorker.js","index.js"],"names":["NumberInput","step","min","max","inputProps","onChange","rest","React","createElement","TextField","type","evt","s","target","value","isNaN","undefined","StyledTextField","withStyles","theme","root","textAlign","color","palette","text","primary","GasCalculator","props","errorMiles","state","miles","fixPPG","gasPPG","setPPG","toFixed","changeMiles","setMiles","changePPG","changeMPG","setMPG","changeDays","setDays","calculate","updates","getVals","days","carMPG","total","this","setState","hasTotal","isFinite","label","id","onBlur","disabled","margin","variant","Component","Theme","setDark","dark","deepOrange","secondary","teal","MuiTextField","window","matchMedia","matches","addListener","x","ThemeProvider","createMuiTheme","children","App","CssBaseline","Container","style","display","flexDirection","alignItems","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.42c59cdb.chunk.js","sourcesContent":["import React from 'react';\nimport TextField from '@material-ui/core/TextField';\n\n\nfunction check(s) {\n  if (s === '') return true;\n  if (!isNaN(s)) return true;\n  return false\n}\n\n\nconst NumberInput = ({step, min, max, inputProps, onChange, ...rest}) => {\n  return React.createElement(TextField, {\n    type: 'number',\n    onChange: onChange ? evt => {\n      if (check(evt.target.value)) onChange(evt);\n    } : undefined,\n    inputProps: {step, min, max, ...inputProps},\n    ...rest,\n  })\n}\n\nexport default NumberInput","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport { withStyles } from '@material-ui/core/styles';\nimport NumberInput from '../components/NumberInput';\n\n\nconst StyledTextField = withStyles(theme => ({\n  root: {\n    '& input:disabled': {\n      textAlign: 'center',\n      color: theme.palette.text.primary,\n    }\n  }\n}))(TextField);\n\nclass GasCalculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gasPPG: this.props.gasPPG,\n      carMPG: this.props.carMPG,\n      miles: this.props.miles,\n      days: this.props.days,\n    }\n  }\n\n  setMiles(miles) {\n    this.setState({miles});\n    this.onChange({miles});\n  }\n  setPPG(gasPPG) {\n    this.setState({gasPPG});\n    this.onChange({gasPPG});\n  }\n  setMPG(carMPG) {\n    this.setState({carMPG});\n    this.onChange({carMPG});\n  }\n  setDays(days) {\n    this.setState({days});\n    this.onChange({days});\n  }\n\n  errorMiles = () => isNaN(this.state.miles)\n\n  getVals() {\n    return {\n      gasPPG: +this.state.gasPPG,\n      carMPG: +this.state.carMPG,\n      days: +this.state.days,\n      miles: +this.state.miles,\n    }\n  }\n\n  fixPPG = () => {\n    if (this.state.gasPPG) {\n      this.setPPG((+this.state.gasPPG).toFixed(2))\n    }\n  }\n\n  changeMiles = evt => this.setMiles(evt.target.value)\n  changePPG = evt => this.setPPG(evt.target.value)\n  changeMPG = evt => this.setMPG(evt.target.value)\n  changeDays = evt => this.setDays(evt.target.value)\n\n  calculate = (updates) => {\n    const {miles, days, carMPG, gasPPG} = {...this.getVals(), ...updates};\n    const gallonsPerDay = miles / carMPG;\n    const dollarsPerDay = gallonsPerDay * gasPPG;\n    const totalDollars = dollarsPerDay * days;\n    return totalDollars;\n  }\n\n  onChange = () => {\n    if (this.props.onChange) {\n      this.props.onChange(this.state.total);\n    }\n  }\n\n  componentDidMount() {\n    this.fixPPG();\n    this.onChange();\n  }\n\n  render() {\n    const total = this.calculate();\n    const hasTotal = total && !isNaN(total) && isFinite(total);\n    return (\n      <>\n        <NumberInput\n          label=\"gas price per gallon\"\n          id=\"gas price per gallon\"\n          value={this.state.gasPPG}\n          onChange={this.changePPG}\n          onBlur={this.fixPPG}\n          type=\"number\"\n          step={0.01}\n          min={0.01}\n        />\n        <NumberInput\n          label=\"car miles per gallon\"\n          id=\"car miles per gallon\"\n          value={this.state.carMPG}\n          onChange={this.changeMPG}\n          type=\"number\"\n          step={1}\n          min={1}\n        />\n        <NumberInput\n          label=\"daily mileage\"\n          id=\"daily mileage\"\n          value={this.state.miles}\n          onChange={this.changeMiles}\n          type=\"number\"\n          step={1}\n          min={0}\n        />\n        <NumberInput\n          label=\"number of days\"\n          id=\"number of days\"\n          value={this.state.days}\n          onChange={this.changeDays}\n          type=\"number\"\n          step={1}\n          min={0}\n        />\n        <StyledTextField\n          disabled\n          margin=\"normal\"\n          label=\"total = \"\n          variant=\"outlined\"\n          value={hasTotal ? \"$\" + total.toFixed(2) : ''}\n        />\n      </>\n    )\n  }\n}\n\nexport default GasCalculator;","import React from 'react';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles'\nimport {\n  deepOrange,\n  teal,\n} from '@material-ui/core/colors';\n\n\nclass Theme extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      theme: {\n        palette: {\n          type: 'light',\n          primary: deepOrange,\n          secondary: teal,\n        },\n        props: {\n          MuiTextField: {\n            variant: 'filled',\n            margin: 'dense',\n          }\n        },\n      }\n    }\n  }\n\n  setDark = (dark) => {\n    this.setState({\n      ...this.state,\n      theme: {\n        ...this.state.theme,\n        palette: {\n          ...this.state.theme.palette,\n          type: dark ? 'dark' : 'light'\n        }\n      }\n    })\n  }\n\n  componentDidMount() {\n    this.setDark(window.matchMedia(\"(prefers-color-scheme:dark)\").matches)\n    window.matchMedia(\"(prefers-color-scheme:dark)\").addListener(x => {\n      this.setDark(x.matches)\n    })\n  }\n  \n  render() {\n    return (\n      <ThemeProvider theme={createMuiTheme(this.state.theme)}>\n        {this.props.children}\n      </ThemeProvider>\n    )\n  }\n}\n\nexport default Theme","import React from 'react';\nimport './App.css';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport {\n  GasCalculator,\n  Theme,\n} from './containers';\n\nfunction App() {\n  return (\n    <Theme>\n      <CssBaseline/>\n      <Container style={{display: 'flex', flexDirection: 'column', alignItems: 'center'}}>\n        <GasCalculator />\n      </Container>\n    </Theme>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}